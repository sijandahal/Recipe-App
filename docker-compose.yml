services:
  backend:
    build: ./backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    depends_on:
      - mongo
      - kafka
      - mysql

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    stdin_open: true
    tty: true

  mongo:
    image: mongo
    ports:
      - "27017:27017"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  mysql:
    image: mysql:8
    container_name: mysql
    ports:
      - "3307:3306"  # external:internal
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: forkast
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "mysql", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

  consumer:
    build:
      context: ./consumer
    depends_on:
      kafka:
        condition: service_started
      mysql:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./recipe.csv:/app/recipe.csv
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    ports:
      - "9870:9870"
      - "9000:9000"
    environment:
      - CLUSTER_NAME=forkast-hadoop
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000  # âœ… ADD THIS LINE
    volumes:
      - hdfs-namenode:/hadoop/dfs/name

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    environment:
      - CLUSTER_NAME=forkast-hadoop
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes:
      - hdfs-datanode:/hadoop/dfs/data
    depends_on:
      - namenode

  spark:
    image: bitnami/spark:latest
    container_name: spark
    depends_on:
      - namenode
    command: >
      bash -c "
      pip install -r /app/requirements.txt &&
      sleep infinity
      "
    volumes:
      - ./spark-scripts:/app
      - ./spark-scripts/jars:/opt/spark/jars

  data-transfer:
    build:
      context: ./spark-scripts
      dockerfile: Dockerfile
    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_started
      namenode:
        condition: service_started
    volumes:
      - ./spark-scripts:/app

volumes:
  mysql-data:
  hdfs-namenode:
  hdfs-datanode:


  
